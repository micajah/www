#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace web.micajah.backoffice.AppCode
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BackOffice_Master_Client")]
	public partial class BackOfficeDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBackOffice_Portfolio(BackOffice_Portfolio instance);
    partial void UpdateBackOffice_Portfolio(BackOffice_Portfolio instance);
    partial void DeleteBackOffice_Portfolio(BackOffice_Portfolio instance);
    partial void InsertBackOffice_Account(BackOffice_Account instance);
    partial void UpdateBackOffice_Account(BackOffice_Account instance);
    partial void DeleteBackOffice_Account(BackOffice_Account instance);
    #endregion
		
		public BackOfficeDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["BackOfficeConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BackOfficeDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BackOfficeDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BackOfficeDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BackOfficeDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BackOffice_Portfolio> BackOffice_Portfolios
		{
			get
			{
				return this.GetTable<BackOffice_Portfolio>();
			}
		}
		
		public System.Data.Linq.Table<BackOffice_Account> BackOffice_Accounts
		{
			get
			{
				return this.GetTable<BackOffice_Account>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BackOffice_Portfolio")]
	public partial class BackOffice_Portfolio : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PortfolioGuid;
		
		private System.Guid _AccountGuid;
		
		private string _PortfolioName;
		
		private string _Overview;
		
		private string _Technologies;
		
		private string _Text;
		
		private string _Partners;
		
		private System.Nullable<int> _PortfolioOrder;
		
		private bool _Active;
		
		private EntityRef<BackOffice_Account> _BackOffice_Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPortfolioGuidChanging(System.Guid value);
    partial void OnPortfolioGuidChanged();
    partial void OnAccountGuidChanging(System.Guid value);
    partial void OnAccountGuidChanged();
    partial void OnPortfolioNameChanging(string value);
    partial void OnPortfolioNameChanged();
    partial void OnOverviewChanging(string value);
    partial void OnOverviewChanged();
    partial void OnTechnologiesChanging(string value);
    partial void OnTechnologiesChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnPartnersChanging(string value);
    partial void OnPartnersChanged();
    partial void OnPortfolioOrderChanging(System.Nullable<int> value);
    partial void OnPortfolioOrderChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public BackOffice_Portfolio()
		{
			this._BackOffice_Account = default(EntityRef<BackOffice_Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PortfolioGuid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid PortfolioGuid
		{
			get
			{
				return this._PortfolioGuid;
			}
			set
			{
				if ((this._PortfolioGuid != value))
				{
					this.OnPortfolioGuidChanging(value);
					this.SendPropertyChanging();
					this._PortfolioGuid = value;
					this.SendPropertyChanged("PortfolioGuid");
					this.OnPortfolioGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountGuid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AccountGuid
		{
			get
			{
				return this._AccountGuid;
			}
			set
			{
				if ((this._AccountGuid != value))
				{
					if (this._BackOffice_Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountGuidChanging(value);
					this.SendPropertyChanging();
					this._AccountGuid = value;
					this.SendPropertyChanged("AccountGuid");
					this.OnAccountGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PortfolioName", DbType="NVarChar(75) NOT NULL", CanBeNull=false)]
		public string PortfolioName
		{
			get
			{
				return this._PortfolioName;
			}
			set
			{
				if ((this._PortfolioName != value))
				{
					this.OnPortfolioNameChanging(value);
					this.SendPropertyChanging();
					this._PortfolioName = value;
					this.SendPropertyChanged("PortfolioName");
					this.OnPortfolioNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Overview", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Overview
		{
			get
			{
				return this._Overview;
			}
			set
			{
				if ((this._Overview != value))
				{
					this.OnOverviewChanging(value);
					this.SendPropertyChanging();
					this._Overview = value;
					this.SendPropertyChanged("Overview");
					this.OnOverviewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Technologies", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Technologies
		{
			get
			{
				return this._Technologies;
			}
			set
			{
				if ((this._Technologies != value))
				{
					this.OnTechnologiesChanging(value);
					this.SendPropertyChanging();
					this._Technologies = value;
					this.SendPropertyChanged("Technologies");
					this.OnTechnologiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Partners", DbType="NVarChar(250)")]
		public string Partners
		{
			get
			{
				return this._Partners;
			}
			set
			{
				if ((this._Partners != value))
				{
					this.OnPartnersChanging(value);
					this.SendPropertyChanging();
					this._Partners = value;
					this.SendPropertyChanged("Partners");
					this.OnPartnersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PortfolioOrder", DbType="Int")]
		public System.Nullable<int> PortfolioOrder
		{
			get
			{
				return this._PortfolioOrder;
			}
			set
			{
				if ((this._PortfolioOrder != value))
				{
					this.OnPortfolioOrderChanging(value);
					this.SendPropertyChanging();
					this._PortfolioOrder = value;
					this.SendPropertyChanged("PortfolioOrder");
					this.OnPortfolioOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BackOffice_Account_BackOffice_Portfolio", Storage="_BackOffice_Account", ThisKey="AccountGuid", OtherKey="AccountGuid", IsForeignKey=true)]
		public BackOffice_Account BackOffice_Account
		{
			get
			{
				return this._BackOffice_Account.Entity;
			}
			set
			{
				BackOffice_Account previousValue = this._BackOffice_Account.Entity;
				if (((previousValue != value) 
							|| (this._BackOffice_Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BackOffice_Account.Entity = null;
						previousValue.BackOffice_Portfolios.Remove(this);
					}
					this._BackOffice_Account.Entity = value;
					if ((value != null))
					{
						value.BackOffice_Portfolios.Add(this);
						this._AccountGuid = value.AccountGuid;
					}
					else
					{
						this._AccountGuid = default(System.Guid);
					}
					this.SendPropertyChanged("BackOffice_Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BackOffice_Account")]
	public partial class BackOffice_Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AccountGuid;
		
		private string _AccountName;
		
		private string _URL;
		
		private bool _Partner;
		
		private EntitySet<BackOffice_Portfolio> _BackOffice_Portfolios;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountGuidChanging(System.Guid value);
    partial void OnAccountGuidChanged();
    partial void OnAccountNameChanging(string value);
    partial void OnAccountNameChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    partial void OnPartnerChanging(bool value);
    partial void OnPartnerChanged();
    #endregion
		
		public BackOffice_Account()
		{
			this._BackOffice_Portfolios = new EntitySet<BackOffice_Portfolio>(new Action<BackOffice_Portfolio>(this.attach_BackOffice_Portfolios), new Action<BackOffice_Portfolio>(this.detach_BackOffice_Portfolios));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountGuid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid AccountGuid
		{
			get
			{
				return this._AccountGuid;
			}
			set
			{
				if ((this._AccountGuid != value))
				{
					this.OnAccountGuidChanging(value);
					this.SendPropertyChanging();
					this._AccountGuid = value;
					this.SendPropertyChanged("AccountGuid");
					this.OnAccountGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AccountName
		{
			get
			{
				return this._AccountName;
			}
			set
			{
				if ((this._AccountName != value))
				{
					this.OnAccountNameChanging(value);
					this.SendPropertyChanging();
					this._AccountName = value;
					this.SendPropertyChanged("AccountName");
					this.OnAccountNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="NVarChar(250)")]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Partner", DbType="Bit NOT NULL")]
		public bool Partner
		{
			get
			{
				return this._Partner;
			}
			set
			{
				if ((this._Partner != value))
				{
					this.OnPartnerChanging(value);
					this.SendPropertyChanging();
					this._Partner = value;
					this.SendPropertyChanged("Partner");
					this.OnPartnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BackOffice_Account_BackOffice_Portfolio", Storage="_BackOffice_Portfolios", ThisKey="AccountGuid", OtherKey="AccountGuid")]
		public EntitySet<BackOffice_Portfolio> BackOffice_Portfolios
		{
			get
			{
				return this._BackOffice_Portfolios;
			}
			set
			{
				this._BackOffice_Portfolios.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BackOffice_Portfolios(BackOffice_Portfolio entity)
		{
			this.SendPropertyChanging();
			entity.BackOffice_Account = this;
		}
		
		private void detach_BackOffice_Portfolios(BackOffice_Portfolio entity)
		{
			this.SendPropertyChanging();
			entity.BackOffice_Account = null;
		}
	}
}
#pragma warning restore 1591
